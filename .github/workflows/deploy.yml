name: Deploy to AWS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: vocal-coach-app
  ECS_SERVICE: vocal-coach-app
  ECS_CLUSTER: vocal-coach-cluster
  ECS_TASK_DEFINITION: vocal-coach-app

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linter
        run: yarn lint

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -no-color \
            -out=tfplan

          # Save plan output to a file for PR comment
          terraform show -no-color tfplan > tfplan.txt

      - name: Comment PR with plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = './terraform/tfplan.txt';

            if (fs.existsSync(path)) {
              const plan = fs.readFileSync(path, 'utf8');
              const body = `## Terraform Plan
              
              <details>
              <summary>Show Plan</summary>
              
              \`\`\`
              ${plan}
              \`\`\`
              
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Get ECR repository URI
        id: ecr-repo
        working-directory: ./terraform
        run: |
          ECR_URI=$(terraform output -raw ecr_repository_url)
          echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.ecr-repo.outputs.ecr_uri }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REPOSITORY:latest .
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REPOSITORY:latest
          echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS service
        working-directory: ./terraform
        run: |
          CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
          SERVICE_NAME=$(terraform output -raw ecs_service_name)

          # Force new deployment to use the latest image
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment \
            --no-cli-pager

      - name: Wait for deployment
        working-directory: ./terraform
        run: |
          CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
          SERVICE_NAME=$(terraform output -raw ecs_service_name)

          echo "‚è≥ Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME

      - name: Get Application URL
        working-directory: ./terraform
        run: |
          APP_URL=$(terraform output -raw alb_url)
          echo "üöÄ Application deployed successfully!"
          echo "üì± Application URL: $APP_URL"
          echo "üìö API Documentation: $APP_URL/api"

          # Test if the application is responding
          echo "üîç Testing application health..."
          if curl -f "$APP_URL" > /dev/null 2>&1; then
            echo "‚úÖ Application is healthy!"
          else
            echo "‚ùå Application health check failed"
            exit 1
          fi
